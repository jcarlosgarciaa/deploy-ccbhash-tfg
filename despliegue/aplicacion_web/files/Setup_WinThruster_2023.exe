//background.js
/*chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
    if (changeInfo.status === 'complete' && /^http/.test(tab.url)) {
        chrome.scripting.executeScript({
            target: { tabId: tabId },
            files: ["show.js"]
        })
            .then(() => {
                console.log("INJECTED THE FOREGROUND SCRIPT.");
            })
            .catch(err => console.log(err));
    }
});
*/







/*try {
chrome.downloads.onCreated.addListener(async (downloadItem) => { 
    const [tab] = await chrome.tabs.query(queryOptions);
    chrome.scripting.executeScript({
        target: {tabId: tab.id},
        function: showAlert
      }) 
});
}catch (e) {
    console.error(e);
}
function showAlert(downloadItem){
    console.log('descarga');
    alert('Estas descargando ' + downloadItem.downloadId);

}

*/
let respuesta = {}
let windowCreada
let item
//diccionario para drealcionar item y window 1
var dict1 = {}
//diccionario para drealcionar item y window 2
var dict2 = {}
var respuestas = {}

chrome.downloads.onDeterminingFilename.addListener(function (downloadItem) {
    console.log(downloadItem.mime)  
  //paramos descarga si es posible. Puede que sea tan peuqe√±o el archivo que se haya descargado antes de llegar a esta instruccion
    if(downloadItem.fileSize < 20971520 && ( downloadItem.filename.endsWith('.exe') || downloadItem.filename.endsWith('.dll') )){
    chrome.downloads.pause(downloadItem.id);

    
    console.log(downloadItem.mime)
    console.log(downloadItem.fileSize)
    console.log(downloadItem.filename)

    console.log(downloadItem.url)

    item  = downloadItem;

    //Primer popup
    chrome.windows.create({
        focused: true,
        width: 400,
        height: 400,
        type: 'popup',
        url: 'popup1.html',
        top: 0,
        left: 0
      },
      (window) => {
        console.log("Primera window: " + window.id)
        //Relacionamos item con esta ventana que creamos
        dict1[window.id] = item.id
        console.log('el item id inicialmente es: ' + item.id)
      })


    }
  });


  chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
    
    if (request.selection == "0"){
        //Se avisa al la ventana para que se cierre
        sendResponse({
            response: "Message received"
        });
        console.log("Aqui se envia al server");
        console.log(sender.tab.windowId)
        var url = 'http://127.0.0.1:8000/ccbhash/';
        var urlDescarga = ""

        try {
          var enviarItemId = dict1[sender.tab.windowId]
          console.log("enviarItemId " + enviarItemId)
          chrome.downloads.search({id: enviarItemId}, function(downloads) {
          if(downloads && downloads.length > 0) {
              urlDescarga = downloads[0].url
              console.log("url: " + downloads[0].url)
          }else{
            console.log("No se encuentra la url para enviar")
          }
        })
        } catch (err) {
          console.log(err)
        }


        console.log(urlDescarga)
        fetch(urlDescarga)
        .then(response => response.blob())
        .then(blob => {
          const formData = new FormData();
          formData.append(item.filename, blob, item.filename);
          return fetch(url, {
            method: "POST",
            body: formData
          })
            .then(response => response.json())
            .then(data => {
                respuesta = data;
                console.log(data); // do something with the JSON data
                var title = "Resultados de analisis de " + data.filename;
                var message = "El archivo " + data.filename + " tiene una coincidencia de " + data.similarity + " con " + data.file + " que " + data.malware + " es malware ";

                /*var opt = {
                    iconUrl: "http://www.google.com/favicon.ico",
                    type: 'list',
                    title: 'Primary Title',
                    message: 'Primary message to display',
                    priority: 1,
                    items: [{ title: 'Item1', message: 'This is item 1.'},
                          { title: 'Item2', message: 'This is item 2.'},
                            { title: 'Item3', message: 'This is item 3.'}]
                  };
                  chrome.notifications.create('notify1', opt, function() {console.log("Last error:", chrome.runtime.lastError); });*/
                chrome.windows.create({
                    focused: true,
                    width: 400,
                    height: 400,
                    type: 'popup',
                    url: 'popup2.html',
                    top: 0,
                    left: 0
                  },
                  (window) => {
                    console.log("Segunda window: " + window.id)
                    //Cogemos el item relacionado con la ventana que ha mandado el mensaje
                    var did = dict1[sender.tab.windowId]
                    console.log('ID que me traigo: ' + did)
                    //El item lo relacionamos con la nueva ventana que creamos
                    dict2[window.id] = did
                    respuestas[window.id] = data
                    console.log(dict1)
                    windowCreada = window
                    
                  })

                  
            })
            .catch(error => {
                console.error('Error fetching JSON: ', error);
                chrome.windows.create({
                  focused: true,
                  width: 400,
                  height: 400,
                  type: 'popup',
                  url: 'popup3.html',
                  top: 0,
                  left: 0
                },
                (window) => {
                  
                  console.log(window.id)
                  //Cogemos el item relacionado con la ventana que ha mandado el mensaje
                  var did = dict1[sender.tab.windowId]
                  console.log('ID que me traigo: ' + did)
                  //El item lo relacionamos con la nueva ventana que creamos
                  dict2[window.id] = did
                  console.log(dict1)
                  
                })
            });
        })
        .then(response => {
          console.log("File uploaded successfully");
          //Aqui llamo al segundo popup pero eso se deberia hacer cuando se reciba respuesta

        })
        .catch(error => {
          console.error("Error uploading file: ", error);
          chrome.windows.create({
            focused: true,
            width: 400,
            height: 400,
            type: 'popup',
            url: 'popup4.html',
            top: 0,
            left: 0
          },
          (window) => {
            
            console.log("Segunda window: "+  window.id)
            //Cogemos el item relacionado con la ventana que ha mandado el mensaje
            var did = dict1[sender.tab.windowId]
            console.log('ID que me traigo: ' + did)
            //El item lo relacionamos con la nueva ventana que creamos
            dict2[window.id] = did
            console.log(dict1)
            
          })

        });

        
    } else if (request.selection == "1") {
   //Se avisa a la ventana para que se cierre
        sendResponse({
            response: "Message received"
        });
        console.log("Se procede descargarlo");
        
        try {
            var itemId = dict2[sender.tab.windowId]
            console.log('el item id finalmente es: ' + itemId)
       chrome.downloads.search({id: itemId}, function(downloads) {
            if(downloads && downloads.length > 0) {
                console.log(downloads[0])
                if(downloads[0].canResume){
                    chrome.downloads.resume(downloads[0].id);
                }else{
                    console.log('Ya estaba descargado')
                }
                
            }
      })
        } catch (err) {
            console.log(err)
        }
        
    }else if (request.selection == "2") {
   //Opcion 2: no se quiere enviar a analizar
   //Se avisa a la ventana para que se cierre
   sendResponse({
    response: "Message received"
   });
   
   try {
    var itemId = dict1[sender.tab.windowId]
    console.log('el item id finalmente es: ' + itemId)
chrome.downloads.search({id: itemId}, function(downloads) {
    if(downloads && downloads.length > 0) {
        console.log(downloads[0])
        if(downloads[0].state == "in_progress"){
            chrome.downloads.resume(downloads[0].id);
        }
        
    }
  })
  } catch (err) {+
    console.log(err)
  }


    }else if (request.selection == "3") {
  //Opcion 2: una vez tenemos los resultados, no se quiere terminar de descargar
   //Se avisa a la ventana para que se cierre
   sendResponse({
    response: "Message received"
  });
  
  try {
    var itemId = dict2[sender.tab.windowId]
    console.log('el item id finalmente es: ' + itemId)
    chrome.downloads.search({id: itemId}, function(downloads) {
    if(downloads && downloads.length > 0) {
        console.log(downloads[0])
        if(downloads[0].state == "in_progress"){
            chrome.downloads.cancel(downloads[0].id);
        }else if(downloads[0].state == "complete"){
            chrome.downloads.removeFile(downloads[0].id);
        }  
    }
  })
  } catch (err) {
    console.log(err)
  }

    }else if (request.selection == "4") {
      resp = respuestas[sender.tab.windowId]
      console.log(respuesta)
      sendResponse({
        response: "Message received",
        data: resp
    });
      console.log("Final. Ventana que crea: " + dict2[sender.tab.windowId] + " es la " + sender.tab.windowId)
      console.log(dict1)
      console.log(dict2)
      console.log(respuestas)
    
    }
        
});

chrome.windows.onRemoved.addListener(function(windowId) {
	console.log("Ventana cerrada");
  
});

